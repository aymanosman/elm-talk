import Html exposing (Html, text, div)
import Html.Attributes exposing (class, style, id)
import Html.Events exposing (onClick)

{-

Mailboxes -- A way of creating new signals

You may be wondering. Are the pre-defined signals the only
ones available to the programmer? How do you handle DOM
events that are generated by a user clicking a button that
the programmer has defined? The requirement that the
'signal graph' be static (that all signals must be defined
up front) leads to the design of the 'mailbox'.

Event handlers in JS are replaced by the mailbox system.

http://package.elm-lang.org/packages/elm-lang/core/3.0.0/Signal#Mailbox

type alias Mailbox =
  { address : Signal.Address a
  , signal : Signal.Signal a
  }

-}

main : Signal Html
main =
  Signal.map2 view fsize blueOrGreen

view : Int -> String -> Html
view fsize colour =
  let foo = [ ("color", colour)
            , ("font-size", toString fsize ++ "px")
            ]
  in
    div []
        [ div [ style foo
              , class "some-class"
              , id "some-id"
              , onClick clicky.address ()
              ]
              [ text "lolwut" ]
        ]

-- () is pronounced 'unit'. Take it to mean 'nothing'
clicky : Signal.Mailbox ()
clicky = Signal.mailbox ()

blueOrGreen : Signal String
blueOrGreen =
  let toggleColour _ col = if col == "red" then "green" else "red"
  in
  Signal.foldp toggleColour "red" clicky.signal

fsize : Signal Int
fsize =
  Signal.foldp (\_ acc -> acc + 10) 20 clicky.signal
